"""
Name:       Harry Chow
CS230:      Section 2
Data:       https://www.kaggle.com/datasets/mannmann2/fortune-500-corporate-headquarters
URL:        Link to your web application on Streamlit Cloud (if posted) 

Description:    
This app allows users to explore data on Fortune 500 companies through state comparisons and detailed company comparisons. Gain insights into revenue, profits, and employee distribution.
"""
import pandas as pd
import streamlit as st
import pydeck as pdk
import plotly.express as px

# [DA1] Load and Clean the Data
@st.cache_data
def load_data(file_path):
    try:
        # Load the dataset
        df = pd.read_csv(file_path)
        
        # Clean column names
        df.columns = df.columns.str.strip()  # Remove leading/trailing spaces
        
        # Ensure columns are treated as numeric
        df['REVENUES'] = pd.to_numeric(df['REVENUES'].str.replace(',', ''), errors='coerce').fillna(0)
        df['PROFIT'] = pd.to_numeric(df['PROFIT'].str.replace(',', ''), errors='coerce').fillna(0)
        df['EMPLOYEES'] = pd.to_numeric(df['EMPLOYEES'].str.replace(',', ''), errors='coerce').fillna(0)
        
        return df
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return pd.DataFrame()

# Load the dataset
file_path = 'Fortune 500 Corporate Headquarters.csv'
df = load_data(file_path)

# [DA2] Calculate Summary Metrics
def calculate_summary(df):
    if df.empty:
        return 0, 0
    total_revenue = df['REVENUES'].sum()  # Total revenue
    total_employees = df['EMPLOYEES'].sum()  # Total employees
    return total_revenue, total_employees

# Begin Streamlit App
st.set_page_config(page_title="Fortune 500 Data Explorer", layout="wide")

# Add the Logo
st.image("logo.png", width=150)

# [DA3] Tabs for Navigation
st.title("Fortune 500 Data Explorer")
tab1, tab2, tab3, tab4 = st.tabs(["State Comparison", "Company Map", "Company Comparison", "Interactive Insights"])

# [DA4] State Comparison Tab
with tab1:
    st.subheader("State Comparison")
    
    # Display Summary Metrics
    total_revenue, total_employees = calculate_summary(df)
    st.write(f"**Total Revenue**: ${total_revenue:,.2f} (In Millions)")
    st.write(f"**Total Employees**: {total_employees:,}")
    
    st.subheader("Heatmaps")
    
    # Heatmap: Profit by State
    try:
        profit_map = px.choropleth(
            df, 
            locations="STATE", 
            locationmode="USA-states", 
            color="PROFIT", 
            scope="usa", 
            title="Profit by State (In Millions)"
        )
        st.plotly_chart(profit_map, use_container_width=True)
        st.caption("This heatmap shows the total profit generated by companies in each state.")
    except Exception as e:
        st.error(f"An error occurred: {e}")
    
    # Heatmap: Revenue by State
    try:
        revenue_map = px.choropleth(
            df, 
            locations="STATE", 
            locationmode="USA-states", 
            color="REVENUES", 
            scope="usa", 
            title="Revenue by State (In Millions)"
        )
        st.plotly_chart(revenue_map, use_container_width=True)
        st.caption("This heatmap shows the total revenue generated by companies in each state.")
    except Exception as e:
        st.error(f"An error occurred: {e}")
    
    # Heatmap: Companies by State
    try:
        companies_by_state = df['STATE'].value_counts().reset_index()
        companies_by_state.columns = ['STATE', 'COMPANIES']
        
        companies_map = px.choropleth(
            companies_by_state, 
            locations="STATE", 
            locationmode="USA-states", 
            color="COMPANIES", 
            scope="usa", 
            title="Companies by State"
        )
        st.plotly_chart(companies_map, use_container_width=True)
        st.caption("This heatmap shows the number of company headquarters located in each state.")
    except Exception as e:
        st.error(f"An error occurred: {e}")

# [DA5] Company Map Tab
with tab2:
    st.subheader("Company Headquarters Map")
    
    # Add interactive filters
    state_filter = st.selectbox("Select a State", options=["All States"] + sorted(df['STATE'].unique()))
    filtered_df = df if state_filter == "All States" else df[df['STATE'] == state_filter]
    
    # Display the map
    try:
        layer = pdk.Layer(
            "ScatterplotLayer",
            data=filtered_df,
            get_position=["LONGITUDE", "LATITUDE"],
            get_radius=30000,
            get_color=[255, 0, 0],
            pickable=True
        )
        view_state = pdk.ViewState(latitude=37.7749, longitude=-95.7129, zoom=3)
        map_fig = pdk.Deck(layers=[layer], initial_view_state=view_state)
        st.pydeck_chart(map_fig)
    except Exception as e:
        st.error(f"An error occurred: {e}")

# [DA6] Company Comparison Tab
with tab3:
    st.subheader("Company Comparison")
    
    # Select Companies for Comparison
    selected_companies = st.multiselect("Select Companies", options=df['NAME'].unique())
    comparison_df = df[df['NAME'].isin(selected_companies)]
    
    for _, row in comparison_df.iterrows():
        st.write(f"### {row['NAME']}")
        st.write(f"Revenue: ${row['REVENUES']:,} (In Millions)")
        st.write(f"Profit: ${row['PROFIT']:,} (In Millions)")
        st.write(f"[Website]({row['WEBSITE']})")
        st.write("---")

# [DA7] Interactive Insights Tab
with tab4:
    st.subheader("Interactive Insights")
    
    # Select Metric and Filter Threshold
    metric = st.selectbox("Choose Metric", options=["REVENUES", "PROFIT", "EMPLOYEES"])
    try:
        threshold = st.slider(f"Minimum {metric} (In Millions)", 
                              min_value=0, 
                              max_value=int(df[metric].max()), 
                              step=1000)
        filtered_insights = df[df[metric] >= threshold].sort_values(by=metric, ascending=False)
        
        # Bar Chart of Filtered Companies
        fig = px.bar(
            filtered_insights, 
            x="NAME", 
            y=metric, 
            title=f"{metric.capitalize()} of Filtered Companies (In Millions)",
            labels={metric: f"{metric.capitalize()} (In Millions)"}
        )
        st.plotly_chart(fig, use_container_width=True)
    except Exception as e:
        st.error(f"An error occurred: {e}")
